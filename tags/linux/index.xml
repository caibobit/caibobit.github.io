<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 窗外蟋蟀博客</title>
    <link>https://keysaim.github.io/tags/linux/</link>
    <description>Recent content in Linux on 窗外蟋蟀博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 17 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://keysaim.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux系统介绍（五）常用命令</title>
      <link>https://keysaim.github.io/post/2017-11-17-linux-study-common-tools/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://keysaim.github.io/post/2017-11-17-linux-study-common-tools/</guid>
      <description>cat命令 很多时候我们通过cat命令来查看文件内容，它会将文件的所有内容显示出来。当然，cat也可以通过管道接收数据，它主要完成的是将从管道接收的输入导到输出。
more跟less命令 有时候用cat命令来显示一个较大的文件并不方便，整个文件内容一次性显示出来简直就是刷屏了。如果需要一页页的显示内容，可以使用more或者less命令，这两个命令会以分页的形式显示文件内容，至于使用哪个命令完全看个人习惯了。此外，这两个命令不仅可以分页显示，而且在分页模式下，你可以用快捷键方便的浏览及搜索：
* 按`d`下翻页 * 按空格下翻页 * 按回车下移一行 * 按`/`进入搜索模式，输入要搜索的关键字，按回车搜索。 * 按`n`搜索下一个 * 按`q`退出查看  tee命令 tee命令一般从管道接收数据，这点与cat类似，将stdin导到stdout。不同的是，tee同时还可以指定一个文件作为输出。这点非常有用，有时候我们想一般看到命令的输出，同时又希望将输出保存到文件中，这时候用tee最为合适。
# date | tee time.log Mon Nov 20 14:05:02 EST 2017 # cat time.log Mon Nov 20 14:05:02 EST 2017  date命令 date命令用来显示时间跟时区，比较常见的用法有：
 默认显示
# date Sun Nov 19 20:08:21 EST 2017 # date -u Mon Nov 20 01:08:28 UTC 2017  其中，-u参数表示显示UTC标准时间，即时区为0的时间。
 指定显示格式
除了默认输出，我们也可以指定显示的格式：
# date +&#39;%A %d-%m-%Y UTC %:z&#39; Sunday 19-11-2017 UTC -05:00  date支持非常多元化的格式，具体可以参考这里。</description>
    </item>
    
    <item>
      <title>Linux系统介绍（四）IO重定向与管道</title>
      <link>https://keysaim.github.io/post/2017-11-16-linux-study-io-pipe/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://keysaim.github.io/post/2017-11-16-linux-study-io-pipe/</guid>
      <description>IO重定向(IO redirection) Linux的有一个强大之处就是可以通过管道(Pipe)跟IO重定向将一系列命令的输出跟输入连接起来。IO重定向是Linux中非常重要的概念，是理解Linux命令，脚本以及Linux IO的基础。
标准输入输出 对于shell来说，有三个基础的流，标准输入流(stdin或者stream 0)，标准输出流(stdout或者stream 1)，标准错误流(stderr或者stream2)。
举个例子，当我们用键盘在shell中执行命令的时候，可以如下图：
通常，stdout跟stderr都输出到了屏幕上，但对于Linux来说，其实是两种不同的输出。
输出重定向 可以用&amp;gt;大于号将stdout重定向到另一个IO，比如文件：
# echo &amp;quot;hello&amp;quot; &amp;gt; test.log # cat test.log hello  上面的命令将stdout重定向到文件test.log中，此时，如果该文件不存在则创建新文件，如果存在则覆盖已有文件。事实上，&amp;gt;重定向是1&amp;gt;的简写，1&amp;gt;可以更清楚的看到实际上是把stdout(stream 1)重定向。
必须注意的是，默认情况下，该重定向会覆盖已有文件，这个在有时候可能不经意间丢失重要数据。shell提供了选项使得我们可以禁止这种覆盖，set -o noclobber可以打开该选项。
# cat test.log hello # set -o noclobber # echo &amp;quot;world&amp;quot; &amp;gt; test.log -bash: test.log: cannot overwrite existing file  此外，在打开该选项之后，其实还是可以强制执行覆盖，可以采用&amp;gt;|来强制重定向到已存在的文件：
# echo &amp;quot;world&amp;quot; &amp;gt; test.log -bash: test.log: cannot overwrite existing file # echo &amp;quot;world&amp;quot; &amp;gt;| test.log # cat test.log world  追加输出 可以采用&amp;gt;&amp;gt;将输出重定向到文件并追加在文件结尾，这样就可以避免覆盖文件了。</description>
    </item>
    
    <item>
      <title>Linux系统介绍（三）shell基础</title>
      <link>https://keysaim.github.io/post/2017-10-10-linux-study-shell-basic/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://keysaim.github.io/post/2017-10-10-linux-study-shell-basic/</guid>
      <description>概述 首先，咱们来了解一下，什么是Shell。操作系统内核给我们提供了各种接口，同时也提供了各种用户层的库，理论上我们基于这些可以编写程序实现各种我们想要的功能，不过问题是，咱们不可能做什么事情都要重新编写程序，这样使用起来也太困难了。因此，操作系统（包括Linux）通常都会引入一个Shell这样的特殊程序，这个程序会接受输入的命令然后执行，并可能将执行结果呈现出来。总结来说，Shell是一个从输入设备或者文件读取命令，并且解释、执行的用户态程序。
在Linux系统中，通常使用的Shell程序包括有： * Sh (Bourne Shell) * Bash (Bourne Again Shell) * Csh (C Shell) * Ksh (Korn Shell)
一般来说，Bash应该是使用最多的Shell程序了，本文也主要基于Bash来展开。
Shell展开（Shell Expansion） Shell程序是一个命令解释器，因此在终端输入命令之后，Shell将扫描命令并做适当的修改，这个过程称为Shell展开。Shell展开是Shell解释执行之前极为重要的一步，了解它将有利于你对Shell命令或者脚本的理解，本章节将逐步带大家来了解这个过程。
命令参数解析 这里的空格包括了制表符（Tab）。当Shell程序扫描输入的命令时，会以*连续*的空格为界，将命令切分成一组参数，因此你输入多个空格为界跟输入一个空格的效果是一样的。通常来讲，第一个参数就是要执行的命令，而后面的参数则是改命令的参数。一下几个命令其实是等效的：
# echo Hello World Hello World # echo Hello World Hello World # echo Hello World Hello World  引号 当然，有时候你需要在一个参数中包括空格，这样的话你就需要将这个参数以引号引起来，引号包括了单引号&#39;跟双引号&amp;quot;，两者都可以。shell会将引号中的字符串视为一个参数，不论里面有没有空格。当然，特别指出的是，不要用反引号`，反引号将在后面详细讲述。
如命令echo &#39;Hello World!&#39;在shell解析之后会有两个参数，分别为echo跟Hello World!。而如果不用引号echo Hello World!，则将解析为三个参数。
 特别提一下，对于echo命令，如果需要输出需要转义的字符，如回车等，则需要执行echo -e &amp;quot;Hello World!\n&amp;quot;，如果不加-e，则\n会被直接显示出来。
&amp;gt; # echo &amp;quot;hello\n&amp;quot; &amp;gt; hello\n &amp;gt; # echo -e &amp;quot;hello\n&amp;quot; &amp;gt; hello &amp;gt; &amp;gt; ``` ## 命令 对于`shell`来说，命令有内部命令（Builtin Commands）跟外部命令（External Commands）之分，所谓内部命令指的是包含在`shell`解析器中的命令。内部命令一般有[4种类型](http://www.</description>
    </item>
    
    <item>
      <title>Linux系统介绍（一）命令行</title>
      <link>https://keysaim.github.io/post/2017-10-09-linux-study-command-line/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://keysaim.github.io/post/2017-10-09-linux-study-command-line/</guid>
      <description>概述 随着Linux的发展，现在已经有了非常多的桌面版本，比如著名的Ubuntu。用这些桌面版本系统，可以满足基本的操作，然而对于一些高级点的操作，还是离不开Linux的命令行(Command Line)。而Linux的精髓也更多的体现在命令行上，其强大的功能，海量的工具，可以帮你轻而易举的完成各种复杂的系统管理操作。本文将详细讲述Linux命令行。
基础命令 帮助类 man Linux有着海量的命令，而每个命令又有很多的不同参数，要记住所有的这些命令是比较困难的，因此，在使用Linux命令行的时候，必须时刻记着查看Linux的帮助，而查看帮助就是采用man命令。
 查看命令帮助
以ls命令为例，如果要查看帮助的话可以输入man ls，查看基本的帮助信息也可以直接ls --help。其将以分页的形式显示该命令的完整文档，操作该文档的基本命令有：
 按u上翻页 按d下翻页 按空格下翻页 按回车下移一行 按/进入搜索模式，输入要搜索的关键字，按回车搜索。 按n搜索下一个 按N搜索上一个 按q退出查看  查看配置文件的帮助
有些系统的配置文件也同样有对应的帮助文档，可以通过man $configfile来查看，比如/etc/system/sysctl.conf配置文件，查看其帮助可以采用命令man sysctl.conf。
 查看后台进程(daemon)的帮助
Linux在后台运行着很多的程序（称为daemon），如果需要查看某个daemon的帮助，可以用命令man $daemon来查看。如man ntpd将查看时间同步daemon的帮助文档。
 搜索需要查看的命令
Linux命令实在太多，有时候如果不记得准确的命令的名字，可以采用man -k $keyword来搜索，如man -k syslog将列出相关命令：
# man -k syslog ipmievd (8) - IPMI event daemon for sending events to syslog logger (1) - a shell command interface to the syslog(3) system log module rsyslog.conf (5) - rsyslogd(8) configuration file rsyslogd (8) - reliable and extended syslogd   whatis man命令将展示完整的文档，可以通过whatis来查看命令的简单介绍。</description>
    </item>
    
    <item>
      <title>Linux系统介绍（二）文件系统结构</title>
      <link>https://keysaim.github.io/post/2017-10-09-linux-study-file-system-hierarchy/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://keysaim.github.io/post/2017-10-09-linux-study-file-system-hierarchy/</guid>
      <description>概述 多数Linux发行版本都是遵循文件系统结构标准（Filesystem Hierarchy Standard, 简称FHS），可以在这里找到该标准。本文对Linux的文件系统结构进行简单的介绍。
根目录/ 所有的Linux系统都有根目录，由/表示。Linux系统的所有内容都在该目录下。
二进制目录 |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;| | 目录 | 说明 | |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;| | /bin | 包括了可执行的二进制文件，通常这些二进制文件可以被所有用户访问。FHS规定，该目录至少包括/bin/cat跟/bin/date文件 | | /sbin | 包括了系统的二进制文件，通过需要root权限，用来配置系统 | | /lib | 包括了/bin所依赖的库 | | /lib/modules | Linux将从/lib/modules/$kernel-version/目录下载入内核模块 | | /lib32和/lib64 | 顾名思义，分别存放不同位数的库 | | /opt | 该目录用来存放一些可选的软件，通常情况下，很多第三方的客户软件会选择安装在该目录下 | |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
配置文件目录 |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;| | 目录 | 说明 | |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;| | /boot | 顾名思义，用来存放系统启动的配置文件，如grub引导的配置文件/boot/grub/grub.cfg | | /etc | 几乎大部分配置文件都放在改目录下。历史上etc的全称是etcetera，不过，现在一般认为是Editable Text Configuration的缩写 | | /etc/init.d | 存放daemon启动、停止等的脚本文件。不过在引入systemd之后，启动脚本有所变化 | | /etc/skel | 存放创建新用户之后所需的配置文件的模板，如.</description>
    </item>
    
    <item>
      <title>Linux系统介绍--综述</title>
      <link>https://keysaim.github.io/post/2017-10-09-linux-study-overview/</link>
      <pubDate>Sun, 08 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://keysaim.github.io/post/2017-10-09-linux-study-overview/</guid>
      <description>概述 从大二（2006年）开始接触Linux到现在已经有10几年了，遥记得那时候Ubuntu还是个位数时代，现在都到17了，真的是光阴如梭啊。这这些年里面，Linux也有了长足的发展，是时候再次系统的对Linux进行重新学习了，所谓温故而知新，何况Linux本身也有很多新的变化。本系列博文将基于博主的这一篇博文中推荐的书籍为基础，结合一些网上的资料，对Linux进行一次系统的整理。希望通过此次整理能够使自己对Linux的理解更进一步，也希望能够给读者一定的参考。
说明 本系列博文中各种例子都将基于Centos 7的Linux系统，可能与其它发行版本会有些许出入，还望读者留意。
相关博文  Linux系统介绍（一）命令行 Linux系统介绍（二）文件系统结构 Linux系统介绍（三）shell基础 Linux系统学习（四）IO重定向与管道 Linux系统介绍（五）常用命令  本系列博文将持续更新，并在此章节中进行统一整理。</description>
    </item>
    
    <item>
      <title>Linux学习从入门到精通推荐书籍</title>
      <link>https://keysaim.github.io/post/2017-08-18-linux-learning-materials/</link>
      <pubDate>Fri, 18 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://keysaim.github.io/post/2017-08-18-linux-learning-materials/</guid>
      <description>如何学习Linux 在现在的生活，生产，研究等领域，Linux已经无所不在，从我们使用的手机，车载设备，到服务器，桌面电脑等，Linux已经成为这个世界方方面面的基石。尤其对于参与技术有关工作的你学习Linux是必须的，那么，该如何有效的学习呢？Linux从诞生至今，已经是一个非常庞大且复杂的系统，下图是Linux系统代码行数的统计（参考linuxcounter）： 可见截止本文为止，Linux的代码行数逼近2千万行，你就每天看1万行也得要6，7年，况且这还只是Linux内核的代码量，再加上每个Linux发行版本有关的代码，估计得突破天际了。因此，要在短期内全面的学习Linux的方方面面对于一个正常的人来说几乎不太可能。所以，学习Linux的关键便在于对于学习Linux的目的一定要明确，通常来讲可能会涉及到一下方面：
 了解及入门 成为Linux的系统管理员 学习Linux应用编程 学习Linux内核开发  当然，这只是其中几个大的方面，即便如此，其中每个方面都是一个非常大的议题。比如说学习Linux内核开发，这个就包括了无数小的方面，内核本身就包括了非常多的细分方向，比如有的搞网络，有的搞文件系统，有的搞驱动开发等等。所以，对于Linux，还请千万慎重的评价自己是否真的精通，学无止境，真要精通Linux的主要方面，有可能需要穷尽你的个人生涯。
当然，对于学习Linux，前人已经铺好了无数的基石，有无数可以参考学习的资料，而且内核也是开源的，必要的时候可以查看其代码，甚至已经有非常多帮你分析内核代码的书籍资料，甚至还有很多中文资料。所以，不论你打算要学习到如何的程度，已经有无数的资料可以参考，也有极为庞大的社区可以依靠。本文将就Linux学习推荐一些经典免费的书籍，主要侧重覆盖从入门到成为系统管理员的有关方面，学习对象为初学Linux，以及需要重新系统学习Linux的读者，将涵盖以下方面：
 入门基础 Linux命令行及工具 Linux Bash脚本 Linux发行版本 Linux系统管理 Linux基本开发   为啥需要重点学习系统管理方面呢？有的Linux开发人员可能会说，不是有专门的Linux系统管理员吗，有必要花大力气学习系统管理吗？这个博主表示是非常有必要，开发可能侧重于功能的实现，而且往往侧重于细节，然而系统管理则直接面向功能本身，更多的是从整个系统的宏观角度来熟悉Linux。咱们有句话说不识庐山真面目，只缘身在此山中便是这个道理，开发者对于细节或许极为了解，但是未必对整个系统功能有足够的熟悉。而如果对于宏观的系统整体有足够的理解，对于开发本身来说也是有很大的促进作用的。
 书籍推荐 入门基础书籍 Introduction to Linux 这是一本免费的书，来自于Linux文档项目。虽然免费，但是不影响它的流行程度，该书比较系统的介绍了Linux的一些基本概念，包括文件系统，命令行，网络等。但是鉴于Linux现在也是版本帝，有些内容可能跟不上最新的版本，但是，这完全不影响对于基本概念的理解。
Linux Fundamentals 从这本书的书名就可以看出，作者Paul Cobbaut就是侧重于介绍Linux最基础的有关知识。涉及到Linux的历史，如何安装以及一些简单但是常用的命令。
Linux命令行及工具书籍 GNU/Linux Command−Line Tools Summary 这本书同样来自于Linux文档项目。适于初学Linux命令行的读者。
Bash Reference Manual from GNU 此书来自于GNU，着重介绍Linux命令行。
The Linux Command Line 如果你把前面的几本基本的命令行的书籍啃完，并迫切希望能够进一步深入了解命令行，那么这本出自William Shotts的书是必须一读的，此书500多页的篇幅，极为详尽的介绍了Linux命令行，也许你自诩比较熟悉命令行，相信此书还是能够带个你新的见识。
Linux Bash脚本书籍 Bash Beginners Guide 顾名思义，此书就是为初学者准备的，同样来自于Linux文档项目。
Advanced Bash-Scripting Guide 如果你对Linux Bash脚本有了基本的认识，那么这本书将是你进阶的必备书籍。此书900多页的篇幅涉及Bash脚本的方方面面，不论对于打算进阶或者已经较为熟悉的人来说都是一本重要的参考书籍。
The AWK Programming Language AWK命令是一个极为强大的Linux命令，同时提供非常强大的脚本支持。也正是因为强大，所以就有专门的书籍来介绍这个命令，如果你要把自己的Linux命令再提升一点的话，建议看下这本书来深入的学习该命令。
Linux 101 Hacks 不论从这本书的书名，还是这本书的来源The Geek Stuff，此书都暗示着其将以新颖独特的角度为你介绍Linux脚本。</description>
    </item>
    
  </channel>
</rss>